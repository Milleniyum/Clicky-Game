{"version":3,"sources":["components/Wrapper/index.js","components/NavBar/index.js","components/Jumbotron/index.js","components/ClickyCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","NavBar","href","homeAddress","statusClass","onAnimationEnd","updateStatusClass","statusText","score","topScore","Jumbotron","ClickyCard","onClick","cardClicked","id","cardClass","style","backgroundImage","image","App","state","window","location","characters","shuffleCards","shuffled","chosen","length","randNum","Math","floor","random","indexOf","push","_this","setState","forEach","character","clicked","this","_this2","components_Wrapper","components_NavBar","components_Jumbotron","map","components_ClickyCard","key","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cdc94b2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport \"./style.css\";\n\nfunction NavBar(props) {\n    return(\n      <nav className=\"navbar\">\n        <ul>\n          <li className=\"brand\">\n            <a href={props.homeAddress}>Clicky Game</a>\n          </li>\n          <li\n            className={props.statusClass}\n            onAnimationEnd={() => props.updateStatusClass()}\n          >{props.statusText}</li>\n          <li>Score: {props.score} | Top Score: {props.topScore}\n          </li>\n        </ul>\n      </nav>\n    );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return <div className=\"jumbotron\">\n    <h1>Clicky Game!</h1>\n    <h2>Click every image to win, but don't click the same image twice!</h2>\n  </div>;\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickyCard(props) {\n  return <div\n    onClick={() => props.cardClicked(props.id)}\n    className={props.cardClass}\n    style={{ backgroundImage: \"url('\" + props.image + \"')\" }} />\n};\n\nexport default ClickyCard;\n","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport ClickyCard from \"./components/ClickyCard\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  \n  state = {\n    score: 0,\n    topScore: 0,\n    homeAddress: window.location.href,\n    statusText: \"Click an image to begin!\",\n    statusClass: \"\",\n    characters: characters,\n    cardClass: \"click-item\"\n  }\n\n  componentDidMount() {\n    this.shuffleCards(this.state.characters);\n  };\n\n  shuffleCards = (characters) => {\n    const shuffled = [];\n    const chosen = [];\n    while (shuffled.length !== characters.length) {\n      let randNum = Math.floor(Math.random() * characters.length);\n      if (chosen.indexOf(randNum) === -1) {\n        shuffled.push(characters[randNum]);\n        chosen.push(randNum);\n      }\n    };\n    \n    this.setState({ characters: shuffled});\n  };\n\n  cardClicked = id => {\n    //Determine if character has already been clicked\n    this.state.characters.forEach(character => {\n      if (character.id === id && !character.clicked) {\n        character.clicked = true;\n        this.setState({ cardClass: \"click-item\", statusClass: \"correct\", score: this.state.score + 1 });\n\n        //Determine if user won\n        if (this.state.score === this.state.characters.length - 1) {\n          this.setState({ statusText: \"You won!\", topScore: this.state.characters.length, score: 0 });\n          this.state.characters.forEach(character => character.clicked = false);\n        } else {\n          this.setState({ statusText: \"Great! Choose another!\" });\n        };\n\n      } else if (character.id === id && character.clicked) {\n        //Determine if top score bested\n        if (this.state.score > this.state.topScore) this.setState({ topScore: this.state.score });\n\n        this.setState({ cardClass: \"click-item shake\", statusText: \"Oops! Already chosen!\", statusClass: \"incorrect\", score: 0 });\n\n        //Reset the click status of each character\n        this.state.characters.forEach(character => character.clicked = false);\n      }\n    })\n    \n    this.shuffleCards(this.state.characters);\n  }\n\n  updateStatusClass = () => {\n    this.setState({ statusClass: \"\"});\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <NavBar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          homeAddress={this.state.homeAddress}\n          statusText={this.state.statusText}\n          statusClass={this.state.statusClass}\n          updateStatusClass={this.updateStatusClass}\n        ></NavBar>\n        <Jumbotron />\n        <div className=\"container\">\n          {this.state.characters.map(character => (\n            <ClickyCard\n              cardClicked={this.cardClicked}\n              key={character.id}\n              id={character.id}\n              cardClass={this.state.cardClass}\n              image={character.image}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}